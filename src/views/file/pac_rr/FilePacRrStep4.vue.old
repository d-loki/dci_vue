<template>
    <div class="w-100">

        <step4-header :payment-on-credit="fileData.quotation.paymentOnCredit"
                      :price="price"
                      :lists="lists"></step4-header>

        <div class="row mt-10">
            <div class="col-md-6 mb-5">
                <label for="pacType" class="form-label">Type de pompe à chaleur</label>
                <Field name="pacType"
                       id="pacType"
                       class="form-select"
                       as="select"
                       v-model="rrType"
                       @change="removeSelectedProducts"
                >
                    <template-item-list :lists="lists.rrTypeList"></template-item-list>
                </Field>
            </div>
            <div class="col-md-6 mb-5" v-if="rrType === 'mono'">
                <label for="assortment" class="form-label">Gamme de produit</label>
                <Field name="assortment"
                       id="assortment"
                       class="form-select"
                       as="select"
                       v-model="assortment"
                >
                    <template-item-list :lists="assortmentLists"></template-item-list>
                </Field>
            </div>
        </div>

        <template v-if="rrType === 'multi'">
            <div class="col-md-6 fv-row">
                <label class="form-label mb-3">Nombre de pièces</label>
                <Field
                    type="number"
                    class="form-control"
                    name="housingRoomNumber"
                    placeholder="1"
                    v-model.number="rrMulti.roomNumber"
                />
                <ErrorMessage
                    name="housingRoomNumber"
                    class="fv-plugins-message-container invalid-feedback"
                ></ErrorMessage>
            </div>

            <div class="row mt-10">
                <template v-for="index in rrMulti.roomNumber" v-bind:key="`area${index}`">
                    <!--                    <div class="row d-flex align-items-end">-->
                    <div class="col-md-2">
                        <label class="form-label mb-3">Pièce n°{{ index }} <sup><var>m2</var></sup></label>
                        <Field
                            type="number"
                            class="form-control"
                            :name="`housingAreaP${index}`"
                            placeholder="1"
                            v-model.number="rrMulti[`areaP${index}`]"
                        />
                        <!--                        </div>-->
                        <!--                        <div class="col-md-4">-->
                        <!--                            <label :for="`housingAssortmentP${index}`" class="form-label">Gamme de produit</label>-->
                        <!--                            <Field :name="`housingAssortmentP${index}`"-->
                        <!--                                   :id="`housingAssortmentP${index}`"-->
                        <!--                                   class="form-select"-->
                        <!--                                   as="select"-->
                        <!--                                   v-model.number="rrMulti[`assortmentP${index}`]"-->
                        <!--                            >-->
                        <!--                                <template-item-list :lists="assortmentLists"></template-item-list>-->
                        <!--                            </Field>-->
                        <!--                        </div>-->
                    </div>
                </template>
            </div>

        </template>

        <el-divider class="mb-10"></el-divider>

        <step4-quotation-header></step4-quotation-header>

        <!--        <h1>&#45;&#45;&#45;&#45;</h1>-->
        <!--        <template v-for="(p,index) in products" v-bind:key="`p_${index}_${p.reference}`">-->
        <!--            <p>{{ p.id }} - {{ p.reference }} - {{ p.label }}</p>-->
        <!--        </template>-->
        <!--        <h1>&#45;&#45;&#45;&#45;</h1>-->

        <!--        <template v-for="(p,index) in products" v-bind:key="`${index}_${p.reference}`">-->
        <!--            <row-price :product="p"></row-price>-->
        <!--        </template>-->
        <!--        <template v-if="!products.length">-->
        <!--            <div class="alert alert-danger d-flex align-items-center p-5 mb-10">-->
        <!--                <i class="fa fa-exclamation fs-2hx me-4 text-danger"></i>-->
        <!--                <div class="d-flex flex-column">-->
        <!--                    <h4 class="mb-1 text-danger">Aucun produit n'a pu être trouvé</h4>-->
        <!--                </div>-->
        <!--            </div>-->
        <!--        </template>-->

        <selected-product ref="$selectedExtProduct"
                          :index="0"
                          :products="extProducts"
                          :selectedProducts="selectedProducts"
                          @selectedProductIsUpdated="updateSelectedProduct($event, 0)"
                          :show-reference="true"></selected-product>
        <template v-if="rrType === 'mono'">
            <selected-product ref="$selectedIntProduct1"
                              :index="1"
                              :products="intProducts"
                              :selectedProducts="selectedProducts"
                              @selectedProductIsUpdated="updateSelectedProduct($event, 1)"
                              :show-reference="true"></selected-product>
        </template>
        <template v-else>
            <template v-for="index in rrMulti.roomNumber" v-bind:key="`select_product_${index}`">
                <selected-product :ref="`$selectedIntProduct${index}`"
                                  :index="index+1"
                                  :products="intProducts"
                                  :selectedProducts="selectedProducts"
                                  @selectedProductIsUpdated="updateSelectedProduct($event, index+1)"
                                  :show-reference="true"></selected-product>
            </template>
        </template>

        <!-- Formulaire caché afin de binder les values au formaulaire comme la sélection des produits se fait via l'algo-->
        <!--        <template v-for="(p, index) in products" v-bind:key="`val_${index}_${p.reference}`">-->
        <!--            <div class="row mt-5 d-none">-->
        <!--                <div class="col-md-4">-->
        <!--                    <Field type="text"-->
        <!--                           :name="`selectedProducts[${index}].id`"-->
        <!--                           class="form-control"-->
        <!--                           v-model.number="p.id" />-->
        <!--                </div>-->
        <!--                <div class="col-md-4">-->
        <!--                    <Field type="text"-->
        <!--                           :name="`selectedProducts[${index}].quantity`"-->
        <!--                           class="form-control"-->
        <!--                           v-model.number="p.quantity" />-->
        <!--                </div>-->
        <!--                <div class="col-md-4">-->
        <!--                    <Field type="text"-->
        <!--                           :name="`selectedProducts[${index}].pu`"-->
        <!--                           class="form-control"-->
        <!--                           v-model.number="p.pu" />-->
        <!--                </div>-->
        <!--            </div>-->
        <!--        </template>-->

        <!-- Formulaire caché afin de binder les values au formaulaire -->
        <!-- HACK : Boucle sur les produits deja set mais qui ne le sont plus, exemple 4 RrMulti -> 2 RrMono, on remove les 2 RrMulti qui ne seront pas set-->
        <!--        <template v-for="index in 6" :key="index">-->
        <!--            <template v-if="products.length < index">-->
        <!--                <div class="row mt-5 d-none">-->
        <!--                    <div class="col-md-4">-->
        <!--                        <Field type="number"-->
        <!--                               :name="`selectedProducts[${index-1}].id`"-->
        <!--                               class="form-control"-->
        <!--                               v-model.number="emptyVal" />-->
        <!--                    </div>-->
        <!--                    <div class="col-md-4">-->
        <!--                        <Field type="number"-->
        <!--                               :name="`selectedProducts[${index-1}].quantity`"-->
        <!--                               class="form-control"-->
        <!--                               v-model.number="emptyVal" />-->
        <!--                    </div>-->
        <!--                    <div class="col-md-4">-->
        <!--                        <Field type="number"-->
        <!--                               :name="`selectedProducts[${index-1}].pu`"-->
        <!--                               class="form-control"-->
        <!--                               v-model.number="emptyVal" />-->
        <!--                    </div>-->
        <!--                </div>-->
        <!--            </template>-->
        <!--        </template>-->

        <options @optionsAreUpdated="updateOptions" :options="filteredOptions"></options>

        <blank-options @optionsAreUpdated="updateBlankOtions" :options="blankOptions"></blank-options>

        <input-discount @discountUpdated="updateDiscount" :discount="discount"></input-discount>

        <wizzard-file-price :price="price"></wizzard-file-price>

        <div class="row mt-10">
            <div class="col-md-12 fv-row">
                <label class="form-label mb-3">Commentaire</label>
                <Field
                    as="textarea"
                    class="form-control form-control-lg"
                    name="commentary"
                    placeholder="RAS"
                    value=""
                />
                <ErrorMessage
                    name="commentary"
                    class="fv-plugins-message-container invalid-feedback"
                ></ErrorMessage>
            </div>
        </div>

        <el-divider class="mb-10"></el-divider>

        <div class="row mt-5">
            <div class="col-md-6 offset-md-3 d-flex justify-content-around">
                <button type="button" @click="generateAddressCertificate" class="btn btn-outline btn-outline-info">
                    Générer
                    l'attestation
                    d'adresse
                </button>
                <button type="button" @click="generateQuotation" class="btn btn-info">Générer le devis</button>
            </div>
        </div>

    </div>
</template>

<script lang="ts">
import { computed, defineComponent, ref } from 'vue';
import { ErrorMessage, Field } from 'vee-validate';
import { Product } from '@/types/v2/File/Common/Product';
import Step4QuotationHeader from '@/components/DCI/wizzard-file/Step4QuotationHeader.vue';
import Options from '@/components/DCI/input/Options.vue';
import { Option } from '@/types/v2/File/Common/Option';
import BlankOptions from '@/components/DCI/input/BlankOptions.vue';
import { BlankOption } from '@/types/v2/File/Common/BlankOption';
import WizzardFilePrice from '@/components/DCI/wizzard-file/Price.vue';
import Step4Header from '@/components/DCI/wizzard-file/Step4Header.vue';
import { Price } from '@/types/v2/File/Price';
import { getCodeBonus, getLessThan2Year } from '@/services/data/dataService';
import TemplateItemList from '@/components/DCI/input/ItemList.vue';
import { RrFile } from '@/types/v2/File/Rr/RrFile';
import RrList from '@/types/v2/File/Rr/RrList';
import RrMulti from '@/types/v2/File/Rr/RrMulti';
import { ItemList } from '@/types/v2/File/Common/ItemList';
import { getCeeBonus } from '@/services/file/fileCommonService';
import InputDiscount from '@/components/DCI/input/Discount.vue';
import SelectedProduct from '@/components/DCI/input/SelectedProduct.vue';

export default defineComponent( {
                                    name:       'file-pac-rr-step-4',
                                    components: {
                                        InputDiscount,
                                        TemplateItemList,
                                        Step4Header,
                                        WizzardFilePrice,
                                        BlankOptions,
                                        Options,
                                        Step4QuotationHeader,
                                        Field,
                                        ErrorMessage,
                                        SelectedProduct,
                                    },
                                    props:      {
                                        products:         {
                                            type:     Array as () => Product[],
                                            required: true,
                                        },
                                        selectedProducts: Array as () => Product[],
                                        options:          Array as () => Option[],
                                        blankOptions:     Array as () => BlankOption[],
                                        fileData:         {
                                            type:     Object as () => RrFile,
                                            required: true,
                                        },
                                        forceRefresh:     Boolean,  // Pour focer le compute des prix quand on arrive sur la step4
                                    },
                                    emits:      [ 'generateQuotation', 'generateAddressCertificate', 'calculedPrice' ],
                                    setup( props, ctx ) {
                                        const _selectedProducts = ref<Product[]>( ( props.selectedProducts as Product[] ) );
                                        const _options          = ref<Option[]>( ( props.options as Option[] ) );
                                        const _blankOptions     = ref<BlankOption[]>( ( props.blankOptions as BlankOption[] ) );
                                        const lists             = ref<RrList>( ( props.fileData.lists as RrList ) );
                                        console.log( 'OPTION -->', _options );


                                        const discount   = ref<number>( props.fileData.quotation.discount );
                                        const rrType     = ref<string>( ( props.fileData.quotation.rrType ) );
                                        const assortment = ref<string>( ( props.fileData.quotation.assortment ) );
                                        const rrMulti    = ref<RrMulti>( ( props.fileData.quotation.rrMulti ) );


                                        const $selectedExtProduct  = ref( null );
                                        const $selectedIntProduct1 = ref( null );
                                        const $selectedIntProduct2 = ref( null );
                                        const $selectedIntProduct3 = ref( null );
                                        const $selectedIntProduct4 = ref( null );
                                        const $selectedIntProduct5 = ref( null );

                                        // const rrAlgo = new RrAlgo( props.fileData.housing );

                                        const generateQuotation = () => {
                                            ctx.emit( 'generateQuotation' );
                                        };

                                        const generateAddressCertificate = () => {
                                            ctx.emit( 'generateAddressCertificate' );
                                        };

                                        const updateOptions = ( options ) => {
                                            _options.value = options;
                                        };

                                        const updateDiscount = ( value ) => {
                                            console.log( 'updateDiscount' );
                                            discount.value = value;
                                        };

                                        /**
                                         * Ajoute ou enlève l'option Wifi selon les PAC
                                         */
                                        const enabledWifiOption = ( enabled: boolean ) => {
                                            const wifiOption = _options.value.find( o => o.label === 'Wifi' );
                                            if ( wifiOption === undefined ) {
                                                return;
                                            }

                                            // Change le nombre de l'option WIFI pour l'activer ou non
                                            _options.value = _options.value.map( o => {
                                                if ( enabled && o.label === 'Wifi' ) {
                                                    return { ...o, number: 1 };
                                                } else if ( !enabled && o.label === 'Wifi' ) {
                                                    return { ...o, number: 0 };
                                                }
                                                return o;
                                            } );
                                        };

                                        const updateNbLayingOption = ( nbLaying: number ) => {
                                            console.log( '%c IN UPDATE', 'background: #fdd835; color: #000000' );
                                            const layingOption = _options.value.find( o => o.label.includes(
                                                'Forfait pose' ) );
                                            console.log( layingOption );
                                            if ( layingOption === undefined ) {
                                                return;
                                            }

                                            // Change le prix de la pose
                                            _options.value = _options.value.map( o => {
                                                if ( o.label.includes( 'Forfait pose' ) ) {
                                                    if ( nbLaying === 1 || nbLaying === 2 ) {
                                                        return { ...o, pu: 600 };
                                                    } else if ( nbLaying === 3 || nbLaying === 4 ) {
                                                        return { ...o, pu: 1200 };
                                                    } else if ( nbLaying === 5 ) {
                                                        return { ...o, pu: 1800 };
                                                    }
                                                }
                                                return o;
                                            } );
                                        };

                                        const updateBlankOtions = ( blankOptions ) => {
                                            _blankOptions.value = blankOptions;
                                        };

                                        const filteredOptions = computed<Option[]>( () => {
                                            console.log( '%c FILTERED OPTION', 'background: #FF0007; color: #000000' );
                                            console.log( _options.value );

                                            if ( rrType.value === 'multi' ) {
                                                console.log( '%c BEFORe UPDAYE CALL UPDATE LATING',
                                                             'background: #fdd835; color: #000000' );
                                                updateNbLayingOption( rrMulti.value.roomNumber );
                                            }

                                            if ( rrType.value === 'multi' || assortment.value !== 'sensira' ) {
                                                enabledWifiOption( false );
                                                return _options.value.filter( o => o.label !== 'Wifi' );
                                            }


                                            enabledWifiOption( true );
                                            return _options.value;
                                        } );


                                        const updateSelectedProduct = ( product, index ) => {
                                            console.log( 'UPDATE' );
                                            console.log( product );
                                            console.log( index );
                                            _selectedProducts.value[ index ] = product;
                                        };

                                        const removeSelectedProducts = () => {
                                            console.log( '%c REMOVE', 'background: #0A00FF; color: #000000' );
                                            console.log( '%c REMOVE', 'background: #0A00FF; color: #000000' );
                                            console.log( '%c REMOVE', 'background: #0A00FF; color: #000000' );
                                            _selectedProducts.value = [];
                                            const extProducts       = props.products.filter( p => p.productType === 'pac_rr' && p.label.toUpperCase()
                                                                                                                                 .includes(
                                                                                                                                     'EXTERIEURE' ) );
                                            const intProducts       = props.products.filter( p => p.productType === 'pac_rr' && !p.label.toUpperCase()
                                                                                                                                  .includes(
                                                                                                                                      'EXTERIEURE' ) );


                                            const newExtProduct = ( $selectedExtProduct.value as any )?.resetSelectedValue(
                                                extProducts );
                                            console.log( 'newExtProduct', newExtProduct );
                                            _selectedProducts.value.push( newExtProduct );

                                            if ( rrType.value === 'mono' ) {
                                                console.log( '%c IN IN', 'background: #fdd835; color: #000000' );
                                                const newIntProduct = ( $selectedIntProduct1.value as any )?.resetSelectedValue(
                                                    intProducts );

                                                _selectedProducts.value.push( newIntProduct );
                                            } else {
                                                console.log( '%c IN ELSE', 'background: #fdd835; color: #000000' );
                                                for ( let i = 1; i <= rrMulti.value.roomNumber; i++ ) {
                                                    let newIntProduct = null;
                                                    switch ( i ) {
                                                        case 1:
                                                            newIntProduct = ( $selectedIntProduct1.value as any )?.resetSelectedValue(
                                                                intProducts );
                                                            break;
                                                        case 2:
                                                            newIntProduct = ( $selectedIntProduct2.value as any )?.resetSelectedValue(
                                                                intProducts );
                                                            break;
                                                        case 3:
                                                            newIntProduct = ( $selectedIntProduct3.value as any )?.resetSelectedValue(
                                                                intProducts );
                                                            break;
                                                        case 4:
                                                            newIntProduct = ( $selectedIntProduct4.value as any )?.resetSelectedValue(
                                                                intProducts );
                                                            break;
                                                        case 5:
                                                            newIntProduct = ( $selectedIntProduct5.value as any )?.resetSelectedValue(
                                                                intProducts );
                                                            break;
                                                    }
                                                    if ( newIntProduct !== null ) {
                                                        _selectedProducts.value.push( newIntProduct );
                                                    }
                                                }
                                                console.log( '%c IN ELSE', 'background: #fdd835; color: #000000' );
                                            }


                                        };


                                        const extProducts = computed<Product[]>( () => {
                                            console.log( '%c EXT', 'background: #FF80C7; color: #000000' );
                                            console.log( '%c EXT', 'background: #FF80C7; color: #000000' );
                                            console.log( '%c EXT', 'background: #FF80C7; color: #000000' );
                                            console.log( '%c EXT', 'background: #FF80C7; color: #000000' );
                                            console.log( '_selectedProducts', _selectedProducts.value );
                                            const filtered = props.products.filter( p => p.productType === 'pac_rr' && p.label.toUpperCase()
                                                                                                                        .includes(
                                                                                                                            'EXTERIEURE' ) );
                                            console.log( 'Filterred -->', filtered );

                                            const filterSelectedProducts = _selectedProducts.value.filter( p => p.productType === 'pac_rr' && p.label.toUpperCase()
                                                                                                                                               .includes(
                                                                                                                                                   'EXTERIEURE' ) );

                                            // if ( filterSelectedProducts.length === 1 ) {
                                            //     const extProduct = ( $selectedExtProduct.value as any )?.resetSelectedValue(
                                            //         filtered );
                                            //     if ( extProduct !== undefined ) {
                                            //         updateSelectedProduct( extProduct, 0 );
                                            //     }
                                            // }

                                            return filtered;
                                        } );

                                        const intProducts = computed<Product[]>( () => {
                                            console.log( '%c intProducts', 'background: #FF80C7; color: #000000' );
                                            console.log( '%c intProducts', 'background: #FF80C7; color: #000000' );
                                            console.log( '%c intProducts', 'background: #FF80C7; color: #000000' );
                                            console.log( '%c intProducts', 'background: #FF80C7; color: #000000' );
                                            console.log( '_selectedProducts', _selectedProducts.value );
                                            const filtered = props.products.filter( p => p.productType === 'pac_rr' && !p.label.toUpperCase()
                                                                                                                         .includes(
                                                                                                                             'EXTERIEURE' ) );
                                            console.log( 'Filterred -->', filtered );

                                            const filterSelectedProducts = _selectedProducts.value.filter( p => p.productType === 'pac_rr' && !p.label.toUpperCase()
                                                                                                                                                .includes(
                                                                                                                                                    'EXTERIEURE' ) );

                                            console.log( 'filterSelectedProducts', filterSelectedProducts );
                                            console.log( 'rrMulti.value.roomNumber', rrMulti.value.roomNumber );

                                            if ( filterSelectedProducts.length > rrMulti.value.roomNumber ) {
                                                console.log( 'splice -->',
                                                             filterSelectedProducts.length - rrMulti.value.roomNumber );

                                                // eslint-disable-next-line vue/no-side-effects-in-computed-properties
                                                _selectedProducts.value.splice( ( filterSelectedProducts.length - rrMulti.value.roomNumber ) );
                                                console.log( '%c IN', 'background: #FF000A; color: #000000' );
                                                console.log( '%c IN', 'background: #FF000A; color: #000000' );
                                                console.log( '%c IN', 'background: #FF000A; color: #000000' );
                                                console.log( filterSelectedProducts );
                                            }

                                            // for ( let i = 1; i <= rrMulti.value.roomNumber; i++ ) {
                                            //     let newIntProduct = null;
                                            //     switch ( i ) {
                                            //         case 1:
                                            //             newIntProduct = ( $selectedIntProduct1.value as any )?.resetSelectedValue(
                                            //                 [filterSelectedProducts[0]] );
                                            //             break;
                                            //         case 2:
                                            //             newIntProduct = ( $selectedIntProduct2.value as any )?.resetSelectedValue(
                                            //                 [filterSelectedProducts[1]] );
                                            //             break;
                                            //         case 3:
                                            //             newIntProduct = ( $selectedIntProduct3.value as any )?.resetSelectedValue(
                                            //                 [filterSelectedProducts[2]] );
                                            //             break;
                                            //         case 4:
                                            //             newIntProduct = ( $selectedIntProduct4.value as any )?.resetSelectedValue(
                                            //                 [filterSelectedProducts[3]] );
                                            //             break;
                                            //         case 5:
                                            //             newIntProduct = ( $selectedIntProduct5.value as any )?.resetSelectedValue(
                                            //                 [filterSelectedProducts[4]] );
                                            //             break;
                                            //     }
                                            //     if ( newIntProduct !== null ) {
                                            //         // eslint-disable-next-line vue/no-side-effects-in-computed-properties
                                            //         _selectedProducts.value.push( newIntProduct );
                                            //     }
                                            // }


                                            // if ( filterSelectedProducts.length < 1 ) {
                                            //     const newSelectedProduct = ( $selectedIntProduct.value as any )?.resetSelectedValue(
                                            //         filtered );
                                            //     if ( newSelectedProduct !== undefined ) {
                                            //         updateSelectedProduct( newSelectedProduct, 1 );
                                            //     }
                                            // }

                                            return filtered;
                                        } );

                                        const assortmentLists = computed<ItemList[]>( () => {
                                            if ( rrType.value === 'multi' ) {
                                                return lists.value.gammeTypeList.filter( g => g.slug !== 'sensira' );
                                            }
                                            return lists.value.gammeTypeList;
                                        } );

                                        // TODO au changement d'isolation en multi on garde de vieux PAC
                                        // const products = computed<Product[]>(
                                        //     () => {
                                        //         console.log( '%c COMPUTED PRODUCTS RR',
                                        //                      'background: #00FF2E; color: #FFFFFF' );
                                        //
                                        //         rrAlgo.updateHousing( props.fileData.housing );
                                        //
                                        //         console.log( 'GAMME -->', assortment.value );
                                        //         let _products: Product[] = [];
                                        //         if ( rrType.value === 'mono' ) {
                                        //             const response = rrAlgo.getUnitsMono( assortment.value );
                                        //
                                        //             if ( response === null ) {
                                        //                 return [];
                                        //             }
                                        //
                                        //             const productExt = getProductByRef( response.unitExt );
                                        //             const productInt = getProductByRef( response.unitInt );
                                        //
                                        //             if ( productExt === undefined || productInt === undefined ) {
                                        //                 return [];
                                        //             }
                                        //
                                        //             console.log( productExt );
                                        //             console.log( productInt );
                                        //             _products = [ productInt, productExt ];
                                        //         } else {
                                        //             const response = rrAlgo.getPacRrMulti( rrMulti.value );
                                        //             console.log( 'RESPONSE -->', response );
                                        //
                                        //             if ( response === null ) {
                                        //                 return [];
                                        //             }
                                        //
                                        //             const productGroup              = getProductByRef( response.unitExt );
                                        //             const productPerRoom: Product[] = [];
                                        //
                                        //             let hasAnUnavailableProduct = false;
                                        //             for ( const p of response.unitsInt ) {
                                        //                 const product = getProductByRef( p );
                                        //                 if ( product === undefined ) {
                                        //                     hasAnUnavailableProduct = true;
                                        //                     continue;
                                        //                 }
                                        //                 productPerRoom.push( product );
                                        //             }
                                        //
                                        //             if ( hasAnUnavailableProduct || productGroup === undefined ) {
                                        //                 return [];
                                        //             }
                                        //
                                        //             console.log( 'productGroup', productGroup );
                                        //             console.log( 'productPerRoom', productPerRoom );
                                        //             _products = [ productGroup, ...productPerRoom ];
                                        //         }
                                        //
                                        //
                                        //         console.log( '%c _PRODUCTS', 'background: #FFB122; color: #000000' );
                                        //         console.log( _products );
                                        //         return _products;
                                        //
                                        //     } );

                                        const price = computed<Price>( () => {
                                            // On utilise props.forceRefresh pour recalculer les prix
                                            if ( props.forceRefresh ) {
                                                console.log( 'NE PAS SUPPRIMER, POUR FORCER LE COMPUTE DES PRICES' );
                                            }

                                            let totalHt     = 0;
                                            let ceeBonus    = 0;
                                            let sumForTva10 = 0;
                                            let tva10;
                                            let tva20;

                                            console.log( 'Prix par defaut -->', totalHt );
                                            console.log( _selectedProducts.value );

                                            for ( const selectedProduct of _selectedProducts.value ) {
                                                console.log( selectedProduct );
                                                if ( selectedProduct === undefined ) {
                                                    continue;
                                                }
                                                totalHt += selectedProduct.pu;
                                            }

                                            console.log( 'Prix avec les produits -->', totalHt );

                                            for ( const option of _options.value ) {
                                                if ( option.number > 0 ) {
                                                    totalHt += option.pu * option.number;

                                                    if ( option.calcTva10 === true ) {
                                                        sumForTva10 += option.pu * option.number;
                                                    }
                                                }
                                            }

                                            console.log( 'Prix avec les options -->', totalHt );

                                            for ( const option of _blankOptions.value ) {
                                                if ( option.number > 0 && option.label !== '' ) {
                                                    totalHt += option.pu * option.number;
                                                }
                                            }
                                            console.log( 'Prix avec les options vides -->', totalHt );

                                            const codeBonus = getCodeBonus();
                                            console.log( 'Code prime --> ', codeBonus );
                                            const lessThan2Year = getLessThan2Year();
                                            console.log( 'Moins de 2 ans --> ', lessThan2Year );


                                            // SI plus de 2 ans
                                            if ( !lessThan2Year ) {
                                                console.log( 'sumForTva10', sumForTva10 );
                                                tva10 = sumForTva10 * 0.1;
                                                console.log( 'TVA 20 -->', tva10 );
                                                tva20 = ( totalHt - sumForTva10 ) * 0.2;
                                                console.log( 'TVA 20 -->', tva20 );
                                            } else {
                                                console.log( '%c TVA 10 = 0', 'background: #fdd835; color: #000000' );
                                                tva10 = 0;
                                                tva20 = totalHt * 0.2;
                                            }

                                            const totalTva = tva10 + tva20;
                                            const totalTtc = totalHt + totalTva;

                                            if ( !props.fileData.disabledBonus ) {
                                                // Si la prime CEE est active
                                                if ( !props.fileData.disabledCeeBonus ) {
                                                    // Afin d'avoir les derniers produits pour le calcul de la prime
                                                    const updatedFileData: RrFile = {
                                                        ...props.fileData,
                                                        quotation: {
                                                            ...props.fileData.quotation,
                                                            // selectedProducts: products.value,
                                                            selectedProducts: _selectedProducts.value,
                                                        },
                                                    };
                                                    ceeBonus                      = getCeeBonus( updatedFileData );
                                                }
                                            }

                                            const totalPrime = ceeBonus;

                                            const price: Price = {
                                                HT:             totalHt,
                                                TVA:            0,
                                                TVA10:          tva10,
                                                TVA20:          tva20,
                                                TTC:            totalTtc,
                                                remainderToPay: totalTtc - totalPrime - discount.value,
                                                CEE:            ceeBonus,
                                                discount:       discount.value,
                                            };

                                            ctx.emit( 'calculedPrice', price );


                                            return price;
                                        } );


                                        return {
                                            $selectedExtProduct,
                                            $selectedIntProduct1,
                                            $selectedIntProduct2,
                                            $selectedIntProduct3,
                                            $selectedIntProduct4,
                                            $selectedIntProduct5,
                                            lists,
                                            price,
                                            filteredOptions,
                                            extProducts,
                                            intProducts,
                                            assortment,
                                            rrType,
                                            rrMulti,
                                            assortmentLists,
                                            discount,
                                            updateSelectedProduct,
                                            updateOptions,
                                            updateBlankOtions,
                                            updateDiscount,
                                            generateQuotation,
                                            generateAddressCertificate,
                                            removeSelectedProducts,
                                            emptyVal: 99999,
                                        };
                                    },
                                } );
</script>

<style>
textarea {
    resize : none;
}
</style>
